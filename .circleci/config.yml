version: 2.1

defaults:
  etcd: &etcd
    image: quay.io/coreos/etcd:v3.3
  kube-apiserver: &kube-apiserver
    image: gcr.io/google-containers/kube-apiserver-amd64:v1.14.2
    command:
    - /usr/local/bin/kube-apiserver
    - --etcd-servers=http://localhost:2379
    - --cert-dir=.
    - --admission-control=AlwaysAdmit
  kube-controller-manager: &kube-controller-manager
    image: gcr.io/google-containers/kube-controller-manager-amd64:v1.14.2
    command:
    - /usr/local/bin/kube-controller-manager
    -  --master=http://localhost:8080
    - --controllers=garbagecollector,namespace

executors:
  rc_test:
    docker:
    - image: circleci/golang:1
    working_directory: /go/src/github.com/Ridecell/ridecell-operator
    environment:
      KUBECONFIG: /go/src/github.com/Ridecell/ridecell-operator/hack/config.yml
      USE_EXISTING_CLUSTER: true

commands:
  rc_setup:
    steps:
    - checkout
    - restore_cache:
        keys:
        - v2-vendor-{{ checksum "Gopkg.lock" }}
    - run: make dep
    - run: echo "export RAND_OWNER_PREFIX=x$(head -c 512 /dev/urandom | tr -dc 'a-z0-9' | head -c 8)" >> $BASH_ENV

  rc_cleanup:
    parameters:
      aws:
        default: false
        type: boolean
      cover:
        type: string
    steps:
    - run: mkdir workspace workspace/cover && cp gover.coverprofile workspace/cover/test_<< parameters.cover >>.coverprofile
    - persist_to_workspace:
        root: workspace
        paths:
        - cover/test_<< parameters.cover >>.coverprofile
    - when:
        condition: << parameters.aws >>
        steps:
        - run:
            command: go run scripts/aws_cleanup/delete_operator_resources.go
            when: always
            no_output_timeout: 15m

  rc_test:
    parameters:
      aws:
        default: false
        type: boolean
      cover:
        type: string
      timeout:
        default: 10m
        type: string
    steps:
    - rc_setup
    - run:
        command: make test
        no_output_timeout: << parameters.timeout >>
    - rc_cleanup:
        cover: << parameters.cover >>
        aws: << parameters.aws >>

jobs:
  lint:
    docker:
    - image: golangci/golangci-lint:latest
    working_directory: /go/src/github.com/Ridecell/ridecell-operator
    steps:
    - rc_setup
    - run: make generate
    - run: golangci-lint run --disable=unused
    - run: make vet

  test:
    executor: rc_test
    steps:
    - rc_setup
    - run: make generate
    # Use a funky grep and xargs thing to speed this up so it doesn't spend time building the non-unit suites.
    - run: grep -l -R @unit cmd pkg | xargs -n 1 dirname | xargs ginkgo -focus @unit --randomizeAllSpecs --randomizeSuites --cover --trace --progress -v -compilers 4
    - run: gover
    - rc_cleanup:
        cover: unit
    - save_cache:
        key: v2-vendor-{{ checksum "Gopkg.lock" }}
        paths:
        - vendor/
 
  test_notifications:
    executor: rc_test
    docker:
    - image: circleci/golang:1
    - *etcd
    - *kube-apiserver
    - *kube-controller-manager
    working_directory: /go/src/github.com/Ridecell/ridecell-operator
    environment:
      GINKGO_ARGS: -focus @notifications
    steps:
    - rc_test:
        cover: other
        aws: true

workflows:
  version: 2
  default:
    jobs:
    - lint
    - test
    - test_notifications:
        requires:
        - test